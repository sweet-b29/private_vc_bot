from __future__ import annotations
import discord
from typing import List, Tuple
from ..db import DB
from ..services.private_rooms import apply_lock_state, delete_private_channel
from ..services.logging import send_mod_log

class KickMemberSelect(discord.ui.Select):
    def __init__(self, options: List[discord.SelectOption]):
        super().__init__(custom_id="priv:kick", placeholder="–ö–æ–≥–æ –≤—ã–≥–Ω–∞—Ç—å?",
                         min_values=1, max_values=1, options=options, disabled=(len(options)==0))

    async def callback(self, interaction: discord.Interaction):
        v: ControlView = self.view  # type: ignore
        voice = interaction.guild.get_channel(v.voice_channel_id)
        room = v.db.get_room(v.voice_channel_id) if voice else None
        if not voice or not room:
            return await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        if interaction.user.id != room.owner_id and not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å.", ephemeral=True)

        target_id = int(self.values[0])
        target = interaction.guild.get_member(target_id)
        if not target or target not in voice.members:
            return await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        if target_id == room.owner_id:
            return await interaction.response.send_message("–°–æ–∑–¥–∞—Ç–µ–ª—è –≤—ã–≥–æ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è.", ephemeral=True)

        try:
            await target.move_to(None, reason="Kick from private vc")
        except (discord.Forbidden, discord.HTTPException):
            return await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)

        await send_mod_log(interaction.client, title="üë¢ –ö–∏–∫ –∏–∑ –ø—Ä–∏–≤–∞—Ç–∫–∏",
                           description=f"{target.mention} –∏–∑ {voice.name} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {interaction.user.mention})")
        await interaction.response.send_message(f"üë¢ {target.mention} –≤—ã–≥–Ω–∞–Ω.", ephemeral=True)


class TransferOwnerSelect(discord.ui.Select):
    def __init__(self, options: List[discord.SelectOption]):
        super().__init__(custom_id="priv:transfer", placeholder="–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞?",
                         min_values=1, max_values=1, options=options, disabled=(len(options)==0))

    async def callback(self, interaction: discord.Interaction):
        v: ControlView = self.view  # type: ignore
        voice = interaction.guild.get_channel(v.voice_channel_id)
        room = v.db.get_room(v.voice_channel_id) if voice else None
        if not voice or not room:
            return await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        if interaction.user.id != room.owner_id and not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞.", ephemeral=True)

        new_owner_id = int(self.values[0])
        if new_owner_id == room.owner_id:
            return await interaction.response.send_message("–í—ã —É–∂–µ –≤–ª–∞–¥–µ–ª–µ—Ü.", ephemeral=True)
        new_owner = interaction.guild.get_member(new_owner_id)
        if not new_owner or new_owner not in voice.members:
            return await interaction.response.send_message("–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ.", ephemeral=True)

        overwrites = voice.overwrites
        old_owner = interaction.guild.get_member(room.owner_id)
        if old_owner in overwrites:
            overwrites[old_owner] = discord.PermissionOverwrite(connect=True, view_channel=True)
        overwrites[new_owner] = discord.PermissionOverwrite(connect=True, view_channel=True, manage_channels=True, move_members=True)
        await voice.edit(overwrites=overwrites, reason="–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        v.db.set_owner(voice.id, new_owner.id)

        await send_mod_log(interaction.client, title="üëë –ü–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è",
                           description=f"{voice.name}: {new_owner.mention} —Ç–µ–ø–µ—Ä—å –≤–ª–∞–¥–µ–ª–µ—Ü (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {interaction.user.mention})")
        await interaction.response.send_message(f"üëë –ü—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã: {new_owner.mention}.", ephemeral=True)


class ControlView(discord.ui.View):
    def __init__(self, db: DB, voice_channel_id: int, owner_id: int, member_options: List[Tuple[int, str]]):
        super().__init__(timeout=None)
        self.db = db
        self.voice_channel_id = voice_channel_id

        others = [(uid, label) for uid, label in member_options if uid != owner_id][:25]
        kick_opts = [discord.SelectOption(label=label, value=str(uid)) for uid, label in others]
        transfer_opts = [discord.SelectOption(label=label, value=str(uid)) for uid, label in others]
        if kick_opts:
            self.add_item(KickMemberSelect(kick_opts))
        if transfer_opts:
            self.add_item(TransferOwnerSelect(transfer_opts))

    def _get_context(self, interaction: discord.Interaction):
        voice = interaction.guild.get_channel(self.voice_channel_id)
        room = self.db.get_room(self.voice_channel_id) if voice else None
        return voice, room

    @discord.ui.button(label="–û—Ç–∫—Ä—ã—Ç/–ó–∞–∫—Ä—ã—Ç", style=discord.ButtonStyle.primary, emoji="üîí", custom_id="priv:toggle")
    async def toggle_lock(self, interaction: discord.Interaction, button: discord.ui.Button):
        voice, room = self._get_context(interaction)
        if not voice or not room:
            return await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        if interaction.user.id != room.owner_id and not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø.", ephemeral=True)

        locked = not room.is_locked
        await apply_lock_state(voice, locked, interaction.guild.get_member(room.owner_id))
        self.db.set_locked(voice.id, int(locked))
        await send_mod_log(interaction.client, title="üîí –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞",
                           description=f"{voice.name}: {'–∑–∞–∫—Ä—ã—Ç' if locked else '–æ—Ç–∫—Ä—ã—Ç'} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {interaction.user.mention})")
        await interaction.response.send_message(f"–ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å **{'–∑–∞–∫—Ä—ã—Ç üîí' if locked else '–æ—Ç–∫—Ä—ã—Ç üîì'}**.", ephemeral=True)

    @discord.ui.select(placeholder="–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        options=[discord.SelectOption(label=str(x), value=str(x)) for x in (2,3,4,5,8,10)],
        custom_id="priv:limit")
    async def set_limit(self, interaction: discord.Interaction, select: discord.ui.Select):
        voice, room = self._get_context(interaction)
        if not voice or not room:
            return await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        if interaction.user.id != room.owner_id and not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç.", ephemeral=True)

        limit_val = int(select.values[0])
        await voice.edit(user_limit=limit_val, reason="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
        self.db.set_limit(voice.id, limit_val)
        await send_mod_log(interaction.client, title="üë• –ò–∑–º–µ–Ω—ë–Ω –ª–∏–º–∏—Ç",
                           description=f"{voice.name}: {limit_val} (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {interaction.user.mention})")
        await interaction.response.send_message(f"–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{limit_val}**.", ephemeral=True)

    @discord.ui.button(label="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.danger, emoji="üóë", custom_id="priv:delete")
    async def delete(self, interaction: discord.Interaction, button: discord.ui.Button):
        voice, room = self._get_context(interaction)
        if not voice or not room:
            return await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        if interaction.user.id != room.owner_id and not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–£–¥–∞–ª–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å.", ephemeral=True)
        await interaction.response.send_message("–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.", ephemeral=True)
        await delete_private_channel(self.db, voice)
